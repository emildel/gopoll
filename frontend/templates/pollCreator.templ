package templates

templ CreatorChartView(title string, answers []string, pollResults []int, pollId string) {
    <body onload={ loadChart(answers, pollResults, pollId) }>
        <h1 class="flex justify-center text-center px-5 pt-14 pb-10 min-[601px]:pt-28 min-[601px]:pb-20 text-3xl font-extrabold underline">{ title }</h1>

        <div class="bg-[#FCFDFC] p-4">
            <div class="flex justify-center items-center relative m-auto h-[50vh] max-w-[1200px] px-2 min-[601px]:px-4 shadow-lg shadow-slate-200 rounded">
                <canvas id="myChart1"></canvas>
            </div>
        </div>

        @openEventConnection(pollId)
    </body>
}

templ PollCreator(title string, answers []string, pollResults []int, pollId string) {
    @Head("GoPoll | Your Poll") {
        @CreatorChartView(title, answers, pollResults, pollId)
    }
}

script openEventConnection(pollId string) {

    const eventSource = new EventSource("/updateChart/" + pollId + "?stream="+pollId);

    eventSource.onopen = function() {
        console.log("event openned")
    };
    
    // eventSource.addEventListener(pollId, (event) => {
    //     console.log("inside updates listener")
    //     const parsedData = JSON.parse(event.data)
    //     let chart = Chart.getChart("myChart1")
    //     chart.data.datasets[0].data = parsedData.data.results;
    //     chart.update();
    // });

    eventSource.onmessage = (event) => {
        console.log("inside updates listener")
        const chart = Chart.getChart("myChart1");
        const parsedData = JSON.parse(event.data)
        chart.data.datasets[0].data = parsedData.data.results;
        chart.update();
    };
    
}

script loadChart(answers []string, pollResults []int, pollId string) {

    // async function subscribe(pollId) {
    //     const endpoint = window.location.origin + "/updateChart/" + pollId;

    //     const response = await fetch(endpoint, {
    //         headers: {
    //             'Accept': 'application/json'
    //         }
    //     });

    //     if (response.status != 200) {
    //         console.log(response.status);

    //         await new Promise(resolve => setTimeout(resolve, 1000));
    //         await subscribe(pollId);

    //     } else {
    //         const results = await response.json();

    //         const scores = results.pollResults.results.map(function(index) {
    //             return index;
    //         });

    //         myChart.data.datasets[0].data = scores;
    //         myChart.update();

    //         await subscribe(pollId);
    //     };
    // };

    // subscribe(pollId);

    var fontSize = 12;
    if(window.innerWidth > 600) {
        fontSize = 16;
    }

    var data = {
        labels: answers,
        datasets: [{
            label: '# of Votes',
            data: pollResults,
            borderWidth: 1
        }]
    };

    var options = {
        maintainAspectRatio: true,
            scales: {
                y: {
                    beginAtZero: true,
                    grace: 5,
                    ticks: {
                        stepSize: 5
                }
            }
        }
    }

    Chart.defaults.font.size = fontSize;

    var myChart = new Chart("myChart1", {
        type: 'bar',
        data: data,
        options: options
    });
}